/* Generated by Yosys 0.38+113 (git sha1 91fbd5898, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* src = "design.sv:3.1-34.10" *)
module buttonControl(clock, reset, button, valid_vote);
  (* src = "design.sv:18.26-18.37" *)
  (* unused_bits = "31" *)
  wire [31:0] _00_;
  wire _01_;
  (* src = "design.sv:28.15-28.28" *)
  wire _02_;
  (* src = "design.sv:17.15-17.37" *)
  wire _03_;
  (* src = "design.sv:17.25-17.37" *)
  wire _04_;
  wire _05_;
  wire [30:0] _06_;
  wire [30:0] _07_;
  (* src = "design.sv:6.11-6.17" *)
  input button;
  wire button;
  (* src = "design.sv:4.11-4.16" *)
  input clock;
  wire clock;
  (* src = "design.sv:10.14-10.21" *)
  reg [30:0] counter;
  (* src = "design.sv:5.11-5.16" *)
  input reset;
  wire reset;
  (* src = "design.sv:7.16-7.26" *)
  output valid_vote;
  reg valid_vote;
  assign _00_ = counter + (* src = "design.sv:18.26-18.37" *) 32'd1;
  (* src = "design.sv:24.3-33.6" *)
  always @(posedge clock)
    if (reset) valid_vote <= 1'h0;
    else valid_vote <= _05_;
  (* src = "design.sv:13.3-22.6" *)
  always @(posedge clock)
    if (reset) counter <= 31'h00000000;
    else if (_01_) counter <= _07_;
  assign _01_ = { _03_, button } != 2'h1;
  assign _02_ = counter == (* src = "design.sv:28.15-28.28" *) 31'h0000000a;
  assign _03_ = button && (* src = "design.sv:17.15-17.37" *) _04_;
  assign _04_ = counter < (* src = "design.sv:17.25-17.37" *) 32'd11;
  assign _05_ = _02_ ? (* full_case = 32'd1 *) (* src = "design.sv:28.15-28.28|design.sv:28.11-31.34" *) 1'h1 : 1'h0;
  assign _06_ = button ? (* src = "design.sv:19.20-19.27|design.sv:19.16-20.28" *) 31'hxxxxxxxx : 31'h00000000;
  assign _07_ = _03_ ? (* full_case = 32'd1 *) (* src = "design.sv:17.15-17.37|design.sv:17.11-20.28" *) _00_[30:0] : _06_;
endmodule

(* src = "design.sv:37.1-87.10" *)
module modeControl(clock, reset, mode, valid_vote_casted, candidate1_vote, candidate2_vote, candidate3_vote, candidate4_vote, candidate1_button_press, candidate2_button_press, candidate3_button_press, candidate4_button_press, leds);
  (* src = "design.sv:58.22-58.33" *)
  (* unused_bits = "31" *)
  wire [31:0] _00_;
  wire _01_;
  (* src = "design.sv:69.15-69.24" *)
  wire _02_;
  (* src = "design.sv:69.28-69.39" *)
  wire _03_;
  (* src = "design.sv:59.16-59.48" *)
  wire _04_;
  (* src = "design.sv:69.15-69.39" *)
  wire _05_;
  (* src = "design.sv:59.35-59.47" *)
  wire _06_;
  (* src = "design.sv:59.17-59.29" *)
  wire _07_;
  wire [30:0] _08_;
  wire [30:0] _09_;
  wire [7:0] _10_;
  wire [7:0] _11_;
  wire [7:0] _12_;
  wire [7:0] _13_;
  wire [7:0] _14_;
  wire [7:0] _15_;
  (* src = "design.sv:46.11-46.34" *)
  input candidate1_button_press;
  wire candidate1_button_press;
  (* src = "design.sv:42.17-42.32" *)
  input [7:0] candidate1_vote;
  wire [7:0] candidate1_vote;
  (* src = "design.sv:47.11-47.34" *)
  input candidate2_button_press;
  wire candidate2_button_press;
  (* src = "design.sv:43.17-43.32" *)
  input [7:0] candidate2_vote;
  wire [7:0] candidate2_vote;
  (* src = "design.sv:48.11-48.34" *)
  input candidate3_button_press;
  wire candidate3_button_press;
  (* src = "design.sv:44.17-44.32" *)
  input [7:0] candidate3_vote;
  wire [7:0] candidate3_vote;
  (* src = "design.sv:49.11-49.34" *)
  input candidate4_button_press;
  wire candidate4_button_press;
  (* src = "design.sv:45.17-45.32" *)
  input [7:0] candidate4_vote;
  wire [7:0] candidate4_vote;
  (* src = "design.sv:38.11-38.16" *)
  input clock;
  wire clock;
  (* src = "design.sv:53.14-53.21" *)
  reg [30:0] counter;
  (* src = "design.sv:50.22-50.26" *)
  output [7:0] leds;
  reg [7:0] leds;
  (* src = "design.sv:40.11-40.15" *)
  input mode;
  wire mode;
  (* src = "design.sv:39.11-39.16" *)
  input reset;
  wire reset;
  (* src = "design.sv:41.11-41.28" *)
  input valid_vote_casted;
  wire valid_vote_casted;
  assign _00_ = counter + (* src = "design.sv:60.22-60.33" *) 32'd1;
  (* src = "design.sv:65.3-86.6" *)
  always @(posedge clock)
    if (reset) leds <= 8'h00;
    else if (_01_) leds <= _15_;
  (* src = "design.sv:54.3-63.6" *)
  always @(posedge clock)
    if (reset) counter <= 31'h00000000;
    else counter <= _09_;
  assign _01_ = { _05_, candidate4_button_press, candidate3_button_press, candidate2_button_press, candidate1_button_press, mode } != 6'h01;
  assign _02_ = ~ (* src = "design.sv:71.20-71.29" *) mode;
  assign _03_ = counter > (* src = "design.sv:69.28-69.39" *) 32'd0;
  assign _04_ = _07_ && (* src = "design.sv:59.16-59.48" *) _06_;
  assign _05_ = _02_ && (* src = "design.sv:69.15-69.39" *) _03_;
  assign _06_ = counter < (* src = "design.sv:59.35-59.47" *) 32'd10;
  assign _07_ = | (* src = "design.sv:59.17-59.29" *) counter;
  assign _08_ = _04_ ? (* full_case = 32'd1 *) (* src = "design.sv:59.16-59.48|design.sv:59.12-62.24" *) _00_[30:0] : 31'h00000000;
  assign _09_ = valid_vote_casted ? (* full_case = 32'd1 *) (* src = "design.sv:57.16-57.33|design.sv:57.12-62.24" *) _00_[30:0] : _08_;
  assign _10_ = candidate4_button_press ? (* src = "design.sv:82.24-82.47|design.sv:82.20-83.43" *) candidate4_vote : 8'hxx;
  assign _11_ = candidate3_button_press ? (* full_case = 32'd1 *) (* src = "design.sv:80.24-80.47|design.sv:80.20-83.43" *) candidate3_vote : _10_;
  assign _12_ = candidate2_button_press ? (* full_case = 32'd1 *) (* src = "design.sv:78.24-78.47|design.sv:78.20-83.43" *) candidate2_vote : _11_;
  assign _13_ = candidate1_button_press ? (* full_case = 32'd1 *) (* src = "design.sv:76.19-76.42|design.sv:76.15-83.43" *) candidate1_vote : _12_;
  assign _14_ = mode ? (* full_case = 32'd1 *) (* src = "design.sv:71.20-71.29|design.sv:71.16-84.14" *) _13_ : 8'h00;
  assign _15_ = _05_ ? (* full_case = 32'd1 *) (* src = "design.sv:69.15-69.39|design.sv:69.11-84.14" *) 8'hff : _14_;
endmodule

(* src = "design.sv:90.1-123.10" *)
module voteLogger(clock, reset, mode, cand1_vote_valid, cand2_vote_valid, cand3_vote_valid, cand4_vote_valid, cand1_vote_recvd, cand2_vote_recvd, cand3_vote_recvd, cand4_vote_recvd);
  (* src = "design.sv:113.39-113.59" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _00_;
  (* src = "design.sv:115.39-115.59" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _01_;
  (* src = "design.sv:117.39-117.59" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _02_;
  (* src = "design.sv:119.39-119.59" *)
  (* unused_bits = "8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "design.sv:98.22-98.38" *)
  output [7:0] cand1_vote_recvd;
  reg [7:0] cand1_vote_recvd;
  (* src = "design.sv:94.11-94.27" *)
  input cand1_vote_valid;
  wire cand1_vote_valid;
  (* src = "design.sv:99.22-99.38" *)
  output [7:0] cand2_vote_recvd;
  reg [7:0] cand2_vote_recvd;
  (* src = "design.sv:95.11-95.27" *)
  input cand2_vote_valid;
  wire cand2_vote_valid;
  (* src = "design.sv:100.22-100.38" *)
  output [7:0] cand3_vote_recvd;
  reg [7:0] cand3_vote_recvd;
  (* src = "design.sv:96.11-96.27" *)
  input cand3_vote_valid;
  wire cand3_vote_valid;
  (* src = "design.sv:101.22-101.38" *)
  output [7:0] cand4_vote_recvd;
  reg [7:0] cand4_vote_recvd;
  (* src = "design.sv:97.11-97.27" *)
  input cand4_vote_valid;
  wire cand4_vote_valid;
  (* src = "design.sv:91.11-91.16" *)
  input clock;
  wire clock;
  (* src = "design.sv:93.11-93.15" *)
  input mode;
  wire mode;
  (* src = "design.sv:92.11-92.16" *)
  input reset;
  wire reset;
  assign _00_ = cand1_vote_recvd + (* src = "design.sv:113.39-113.59" *) 32'd1;
  assign _01_ = cand2_vote_recvd + (* src = "design.sv:115.39-115.59" *) 32'd1;
  assign _02_ = cand3_vote_recvd + (* src = "design.sv:117.39-117.59" *) 32'd1;
  assign _03_ = cand4_vote_recvd + (* src = "design.sv:119.39-119.59" *) 32'd1;
  (* src = "design.sv:104.3-122.6" *)
  always @(posedge clock)
    if (reset) cand1_vote_recvd <= 8'h00;
    else if (_04_) cand1_vote_recvd <= _00_[7:0];
  (* src = "design.sv:104.3-122.6" *)
  always @(posedge clock)
    if (reset) cand2_vote_recvd <= 8'h00;
    else if (_05_) cand2_vote_recvd <= _01_[7:0];
  (* src = "design.sv:104.3-122.6" *)
  always @(posedge clock)
    if (reset) cand3_vote_recvd <= 8'h00;
    else if (_06_) cand3_vote_recvd <= _02_[7:0];
  (* src = "design.sv:104.3-122.6" *)
  always @(posedge clock)
    if (reset) cand4_vote_recvd <= 8'h00;
    else if (_07_) cand4_vote_recvd <= _03_[7:0];
  assign _08_ = ~ mode;
  assign _09_ = ~ cand1_vote_valid;
  assign _10_ = ~ cand2_vote_valid;
  assign _11_ = ~ cand3_vote_valid;
  assign _04_ = & { cand1_vote_valid, _08_ };
  assign _05_ = & { _09_, cand2_vote_valid, _08_ };
  assign _06_ = & { _10_, _09_, cand3_vote_valid, _08_ };
  assign _07_ = & { _11_, _10_, _09_, cand4_vote_valid, _08_ };
endmodule

(* src = "design.sv:126.1-171.10" *)
module votingMachine(clock, reset, mode, button1, button2, button3, button4, led);
  (* src = "design.sv:147.25-147.52" *)
  wire _0_;
  (* src = "design.sv:147.25-147.67" *)
  wire _1_;
  (* src = "design.sv:145.8-145.20" *)
  wire anyValidVote;
  (* src = "design.sv:130.11-130.18" *)
  input button1;
  wire button1;
  (* src = "design.sv:131.11-131.18" *)
  input button2;
  wire button2;
  (* src = "design.sv:132.11-132.18" *)
  input button3;
  wire button3;
  (* src = "design.sv:133.11-133.18" *)
  input button4;
  wire button4;
  (* src = "design.sv:141.14-141.30" *)
  wire [7:0] cand1_vote_recvd;
  (* src = "design.sv:142.14-142.30" *)
  wire [7:0] cand2_vote_recvd;
  (* src = "design.sv:143.14-143.30" *)
  wire [7:0] cand3_vote_recvd;
  (* src = "design.sv:144.14-144.30" *)
  wire [7:0] cand4_vote_recvd;
  (* src = "design.sv:127.11-127.16" *)
  input clock;
  wire clock;
  (* src = "design.sv:134.18-134.21" *)
  output [7:0] led;
  wire [7:0] led;
  (* src = "design.sv:129.11-129.15" *)
  input mode;
  wire mode;
  (* src = "design.sv:128.11-128.16" *)
  input reset;
  wire reset;
  (* src = "design.sv:137.8-137.20" *)
  wire valid_vote_1;
  (* src = "design.sv:138.8-138.20" *)
  wire valid_vote_2;
  (* src = "design.sv:139.8-139.20" *)
  wire valid_vote_3;
  (* src = "design.sv:140.8-140.20" *)
  wire valid_vote_4;
  assign _0_ = valid_vote_1 | (* src = "design.sv:147.25-147.52" *) valid_vote_2;
  assign _1_ = _0_ | (* src = "design.sv:147.25-147.67" *) valid_vote_3;
  assign anyValidVote = _1_ | (* src = "design.sv:147.25-147.82" *) valid_vote_4;
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:163.15-170.4" *)
  modeControl MC (
    .candidate1_button_press(button1),
    .candidate1_vote(cand1_vote_recvd),
    .candidate2_button_press(button2),
    .candidate2_vote(cand2_vote_recvd),
    .candidate3_button_press(button3),
    .candidate3_vote(cand3_vote_recvd),
    .candidate4_button_press(button4),
    .candidate4_vote(cand4_vote_recvd),
    .clock(clock),
    .leds(led),
    .mode(mode),
    .reset(reset),
    .valid_vote_casted(anyValidVote)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:155.14-161.4" *)
  voteLogger VL (
    .cand1_vote_recvd(cand1_vote_recvd),
    .cand1_vote_valid(valid_vote_1),
    .cand2_vote_recvd(cand2_vote_recvd),
    .cand2_vote_valid(valid_vote_2),
    .cand3_vote_recvd(cand3_vote_recvd),
    .cand3_vote_valid(valid_vote_3),
    .cand4_vote_recvd(cand4_vote_recvd),
    .cand4_vote_valid(valid_vote_4),
    .clock(clock),
    .mode(mode),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:150.17-150.95" *)
  buttonControl bc1 (
    .button(button1),
    .clock(clock),
    .reset(reset),
    .valid_vote(valid_vote_1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:151.17-151.95" *)
  buttonControl bc2 (
    .button(button2),
    .clock(clock),
    .reset(reset),
    .valid_vote(valid_vote_2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:152.17-152.95" *)
  buttonControl bc3 (
    .button(button3),
    .clock(clock),
    .reset(reset),
    .valid_vote(valid_vote_3)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "design.sv:153.17-153.95" *)
  buttonControl bc4 (
    .button(button4),
    .clock(clock),
    .reset(reset),
    .valid_vote(valid_vote_4)
  );
endmodule
